{"version":3,"sources":["Navbar.js","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","onClick","toggle","id","htmlFor","Chat","_useState","useState","_useState2","Object","slicedToArray","Text","setText","Fragment","style","color","heading","rows","value","onChange","event","target","placeholder","newText","toUpperCase","toLowerCase","text","document","getElementById","select","navigator","clipboard","writeText","split","join","length","filter","e","App","darkmode","setDarkmode","body","backgroundColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5e3b1eae.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} text-${props.mode==='light'?'dark':'light'}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className={`navbar-brand text-${props.mode==='light'?'dark':'light'}`} href=\"#\">\r\n          TextUtils\r\n        </a>\r\n        <button\r\n          className={`navbar-toggler bg-${props.mode==='light'?'dark':'light'}`}\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        {/* <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <Link className={`nav-link active text-${props.mode==='light'?'dark':'light'}`} aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className={`nav-link text-${props.mode==='light'?'dark':'light'}`} to=\"/About\">\r\n                About\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className={`nav-link text-${props.mode==='light'?'dark':'light'}`} to=\"/\">\r\n                Contact\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div> */}\r\n      </div>\r\n      <div className=\"form-check form-switch w-25 d-flex\">\r\n        <input\r\n          className=\"form-check-input mx-3\"\r\n          onClick={props.toggle}\r\n          type=\"checkbox\"\r\n          id=\"flexSwitchCheckDefault\"\r\n        />\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n          Enable Dark Mode\r\n        </label>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React , {useState} from 'react'\r\n\r\nexport default function Chat(props) {\r\n\r\n    const handleUppercase=()=>{\r\n        let newText=Text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleLowercase=()=>{\r\n        let newText=Text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleCleartext=()=>{\r\n        setText('');\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        let text=document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n    }\r\n\r\n    const handleExtraspace=()=>{\r\n        let text=Text.split(/[ ]+/)\r\n        setText(text.join(\" \"))\r\n    }\r\n\r\n    const handleOnchange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [Text, setText] = useState('');\r\n\r\n    return(\r\n        <>\r\n        <div className=\"mb-3 mt-3 container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n            <h3>{props.heading}</h3>\r\n            <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"6\" value={Text} onChange={handleOnchange} placeholder=\"Enter The Text\"></textarea>\r\n            <button type=\"button\" className=\"btn btn-primary mt-3 mx-1\" onClick={handleUppercase}>Convert To Upper Case</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-3 mx-1\" onClick={handleLowercase}>Convert To Lower Case</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-3 mx-1\" onClick={handleCleartext}>Clear Text</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-3 mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-3 mx-1\" onClick={handleExtraspace}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-2\" style={{color:props.mode==='light'?'black':'white'}}>\r\n            <h5> Your Content Summary </h5>\r\n            <p>No Of Characters {Text.length} , No of Words {Text.split(\" \").filter((e)=>{return e.length!==0}).length} , No of sentences {Text.split(\". \").filter((e)=>{return e.length!==0}).length}</p>\r\n            <p>Approximatly {0.008*Text.split(\" \").filter((e)=>{return e.length!==0}).length} Minutes Needed To Read </p>\r\n            <h2>Preview</h2>\r\n            <p>{Text.length>0?Text:'Nothing For Preview'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n","import './App.css';\nimport Navbar from './Navbar';\nimport Chat from './Chat';\nimport React,{useState} from \"react\";\n// import Alert from './Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [darkmode, setDarkmode] = useState('light');\n  const toggle=()=>{\n    if(darkmode ==='light')\n    {\n      setDarkmode('dark');\n      document.body.style.backgroundColor='#13284e';\n    }\n    else\n    {\n      setDarkmode('light');\n      document.body.style.backgroundColor='white';\n    }\n  }\n  return (\n    <>\n    {/* // <Router>\n      {/* <Routes> */}\n          {/* // <Route exact path=\"/About\" element={<Alert></Alert>}/>\n          // <Route exact path=\"/\" element={<Chat heading=\"Enter The Text To Analyse\" mode={darkmode}/>}/>\n      {/* </Routes> */}\n    {/* </Router> */}\n    <Navbar mode={darkmode} toggle={toggle}/>\n    <Chat heading=\"Enter The Text To Analyse\" mode={darkmode}/>\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}